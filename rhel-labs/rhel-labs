#!/bin/bash
tput civis
set -e
source /usr/local/sbin/rhel-labs-functions.cfg 
source /usr/local/sbin/load.cfg
set -u 
set -a
P1CHECK=${var["P1CHECK"]}
P2CHECK=${var["P2CHECK"]}
P3CHECK=${var["P3CHECK"]}
P4CHECK=${var["P4CHECK"]}
P5CHECK=${var["P5CHECK"]}
P6CHECK=${var["P6CHECK"]}
P7CHECK=${var["P7CHECK"]}
DIALOG=${DIALOG=dialog}
archive1=${var["archive1"]}
DPATH=${var["DPATH"]}
location=${var["location"]}
size=${var["size"]}
grep1=${var["grep1"]} && grep2=${var["grep2"]} && grep3=${var["grep3"]} && grep4=${var["grep4"]}
download_kill=${var["download_kill"]}
download_kill2=${var["download_kill2"]}
md5server_kill=${var["md5server_kill"]}
qemu_dir=${var["qemu_dir"]}
download_arch=${var["download_arch"]}
download_md5sum=${var["download_md5sum"]}
install_dir=${var["install_dir"]}
md5check=${var["md5check"]}
md5CHECK=${var["md5CHECK"]}
pv_tar=${var["pv_tar"]}
DIALOGRC=${var["DIALOGRC"]}
virt1=${var["virt1"]}
virt1_image=${var["virt1_image"]}
virt2_image=${var["virt2_image"]}
virt3_image=${var["virt3_image"]}
server_image=${var["server_image"]}
download_servermd5=${var["download_servermd5"]}
m5sum_server=${var["m5sum_server"]}
m5sum_server_post=${var["m5sum_server_post"]}
md5check2=${var["md5check2"]}
md5CHECK2=${var["md5CHECK2"]}
mac=${var["mac"]}
install_check=${var["install_check"]}
virtcheck_server=${var["virtcheck_server"]}
virshcheck_server=${var["virshcheck_server"]}
vmpwdown_server=${var["vmpwdown_server"]}
vmdelete_server=${var["vmdelete_server"]}
libvirtd_start=${var["libvirtd_start"]}
libvirtd_enable=${var["libvirtd_enable"]}
virt_install_kill=${var["virt_install_kill"]}
reboot_kill=${var["reboot_kill"]}
reboot=${var["reboot"]}
virtstop=${var["virtstop"]}
netcheck=${var["netcheck"]}
virtstart=${var["virtstart"]}
kill_console=${var["kill_console"]}
netdelete=${var["netdelete"]}
netcreate=${var["netcreate"]}
virtconsole=${var["virtconsole"]}
netdefine=${var["netdefine"]}
autostart=${var["autostart"]}
downloadfd_tail=${var["downloadfd_tail"]}

echo "Main dialog menu reloaded with exec or initial startup was completed" | __syslog
exec -a rhel-labs 2> >(logger -s -t $(basename "$0")) &
xx=$(xx 2>/dev/null) || xx=${var["xx"]}stage-0$$
trap "rm -f $xx" 0 1 2 5 15

	if   [[ ! -d $P1CHECK ]] &&  [[ ! -d $P7CHECK ]] || [[ ! -d $P1CHECK ]] || [[ ! -d $P7CHECK ]] ; then
        /usr/bin/mkdir -p "$P1CHECK" && /usr/bin/mkdir -p "$P7CHECK" && /usr/bin/sudo /usr/bin/mkdir -p "$P4CHECK" && /usr/bin/cd "$P1CHECK" && eval "$P6CHECK" && echo ""$P1CHECK" created" || echo "Error making "$P1CHECK", usually normal"| __syslog
	
	elif [[ -d $P1CHECK ]]; then
        /usr/bin/cd "$P1CHECK" && /usr/bin/sudo /usr/bin/mkdir -p "$P4CHECK" && eval "$P6CHECK" || echo "Error executing "$P1CHECK" and/or "$P3CHECK", usually normal" | __syslog
	
	elif [[ ! -d $P2CHECK ]]; then
		__random
	else
		echo ""$P1CHECK" and "$P2CHECK" have been created" | __syslog
	fi
	
	echo "checking for "$P1CHECK"/.install-finished" | __syslog
	if [[ ! -f "$P1CHECK"/.install-finished ]]; then

	HOME=${var["DPATH"]}
	USER="rhel-labs"
		
        xx=$(xx 2>/dev/null) || xx=${var["xx"]}stage1-$$
		trap "rm -f $xx" 0 1 2 5 15
		cd "$HOME"

		$DIALOG --nocancel --no-kill  --backtitle "| RHEL-LABS |" \
			--menu " \n
		\n
		   Select either 'Install' or 'Exit': \n
			" 25 75 25 \
			"Exit"  "Exit the application" \
			"Install"  "Install lab requirements and prerequisites" 2> "$xx" || echo "Failed to start rhel-labs" | __syslog

### second stage of the dialog menu if .install-finished is present and .server-installed isn't then show on the server.example.com menu the vm is (NOT INSTALLED) and selecting this menu starts the install of server.example.com; additional conditional checks need to be added here.
	echo "$P1CHECK/.install-finished found, on stage 1 menu" | __syslog
	elif [[ -f $P1CHECK/.install-finished ]] && [[ ! -f $P1CHECK/.server-installed ]] && [[ -f $P4CHECK/server.qcow ]]; then
		
		HOME=${var["DPATH"]}
		USER="rhel-labs"
        virtcheck=$(virtcheck 2>/dev/null) || virtcheck=${var["virtcheck"]}
		xx=`xx 2>/dev/null` || xx=${var["xx"]}stage2-$$
		trap "rm -f $xx" 0 1 2 5 15
        cd "$HOME"
        virtcheck=$(eval "$virtcheck")

			if [[ $virtcheck == 1 ]] && [[ ! -f $P1CHECK/.server-installed ]]; then
                touch "$P1CHECK"/.server-installed
				exec /usr/local/sbin/rhel-labs
			fi

		$DIALOG --no-kill --nocancel  --backtitle "| RHEL-LABS |" \
        		--menu "Install server.example.com" 25 75 25 \
        		"Exit"  "Exit the application" \
			"Install VM"  "Install Server VM (NOT INSTALLED)" 2> "$xx" || echo "Failed to start rhel-labs stage 2" | __syslog

### third stage of the dialog menu; same as the last menu however if .install-finished .server-installed and .rhel-labs-Server are present then allow the user to progress to the next state showing server.example.com as (INSTALLED)

        elif [[ -f $P1CHECK/.install-finished ]] && [[ -f $P1CHECK/.server-installed ]] && [[ ! -f $P1CHECK/.rhel-labs-Server ]] && [[ -f $P4CHECK/server.qcow ]]; then
		USER="rhel-labs"
		HOME=${var["DPATH"]}
        virtcheck=$(virtcheck 2>/dev/null) || virtcheck=${var["virtcheck"]}
		xx=`xx 2>/dev/null` || xx=${var["xx"]}stage3-$$
        trap "rm -f $xx" 0 1 2 5 15
        cd "$HOME"
        virtcheck=$(eval "$virtcheck")

		if [[ $virtcheck == 0 ]] && [[ -e $P1CHECK/.server-installed ]]; then 
			rm -f "$P1CHECK"/.server-installed
			exec /usr/local/sbin/rhel-labs
		fi
		$DIALOG --nocancel  --backtitle "| RHEL-LABS |" \
			--menu "server.example.com is installed:" 25 75 25 \
			"Exit"  "Exit the application" \
			"Server"  "Server VM (INSTALLED)" 2> "$xx" || rm -f /home/rhel-labs/rhel-labs/.install/.rhel-labs-Server

### fourth stage of the dialog menu, if .install-finished .server-installed and .rhel-labs-Server are present then unlock.

        elif [[ -f $P1CHECK/.install-finished ]] && [[ -f $P1CHECK/.server-installed ]] && [[ -f $P1CHECK/.rhel-labs-Server ]] && [[ -f $P4CHECK/server.qcow ]]; then
		        USER="rhel-labs"
                HOME=${var["DPATH"]}
                virtcheck=$(virtcheck 2>/dev/null) || virtcheck=${var["virtcheck"]}
                xx=$(xx 2>/dev/null) || xx=${var["xx"]}stage4-$$
                trap "rm -f $xx" 0 1 2 5 15
                cd "$HOME"
                virtcheck=$(eval "$virtcheck")

		$DIALOG --nocancel  --backtitle "| RHEL-LABS |" \
			--menu "server.example.com:" 25 75 25 \
			"Back"  "Leave menu" \
			"Console" "Open Console" \
			"Start" "Start server" \
			"Stop" "Stop server" \
			"Reboot" "Reboot server" \
			"Snapshot" "Backup current server state" \
            "Revert" "Revert server" 2> "$xx" || rm -f /home/rhel-labs/rhel-labs/.install/.rhel-labs-Server

### if all else fails exit with unknown failure. 
    else 
	        echo "Unknown failure, all attempts to fix the lab have failed. Manually delete '/home/rhel-labs/rhel-labs' resetting server to NOT INSTALLED, restart tui if needed" | __syslog && exit || exit
	fi

### handoff from user selected input from the dialog menu; this is passed via stderr to variable `xx` and evaluated as choice then pushed to the multiple elif statement trigger a function.  
	retval=$?
    choice=$(cat $xx)
	case "$retval" in
  	0)
	echo "$xx" | __syslog
### input
	;;
  	1)
	echo "User selected cancel" | __syslog 
### cancel selected
	;;
  	255)
	echo "User selected exit" | __syslog
### exit selected
	;;

### end of dialog case statement evaluation everything below this point will be executed based on user selected input from the dialog menu
	esac
    if [ "$choice" = "Exit" ]; then
        exit || echo "Program has failed to exit" | __syslog

### up one level in the dialog menu; use exec to re-execute the rhel-labs script detecting statefile changes
	elif [ "$choice" = "Back" ]; then
        rm -f /home/rhel-labs/rhel-labs/.install/.rhel-labs-Server && exec /usr/local/sbin/rhel-labs || echo "Entering the /usr/local/sbin/rhel-labs-server menu has failed, please check the /usr/local/sbin/rhel-labs-server dialog menu" | __syslog

### install functions from the first dialog menu;
	elif [ "$choice" = "Install" ]; then
        /usr/local/sbin/rhel-labs-functions.cfg clone && /usr/local/sbin/rhel-labs-functions.cfg labmd5 && /usr/local/sbin/rhel-labs-functions.cfg tar && exec /usr/local/sbin/rhel-labs || echo "Downloading the lab has failed, please check the /usr/local/sbin/rhel-labs-build script" | __syslog

### install server.example.com from the second stage dialog menu;
	elif [ "$choice" = "Install VM" ]; then
        /usr/local/sbin/rhel-labs-functions.cfg server_1 && /usr/local/sbin/rhel-labs-functions.cfg server_2 && /usr/local/sbin/rhel-labs-functions.cfg server_3 && /usr/local/sbin/rhel-labs-functions.cfg server_4 && sleep 5 && exec /usr/local/sbin/rhel-labs || echo "Failed to install VM Server stage 1 through 4" | __syslog

### sever menu changes dynamically for statefile changes;
	elif [ "$choice" = "Server" ]; then
        touch /home/rhel-labs/rhel-labs/.install/.rhel-labs-Server && exec /usr/local/sbin/rhel-labs || rm -f /home/rhel-labs/rhel-labs/.install/.rhel-labs-Server 2> __syslog && echo "Entering the /usr/local/sbin/rhel-labs-server menu has failed, please check the /usr/local/sbin/rhel-labs-server dialog menu" | __syslog

### reboot server.example.com;
	elif [ "$choice" = "Reboot" ]; then
        /usr/local/sbin/rhel-labs-functions.cfg  __serverreboot 2> __syslog wait; exec /usr/local/sbin/rhel-labs || echo "failed to run __serverreboot check functions" | __syslog && reset

### stop server.example.com
	elif [ "$choice" = "Stop" ]; then
        /usr/local/sbin/rhel-labs-functions.cfg  __serverstop 2> __syslog wait; exec /usr/local/sbin/rhel-labs || echo "failed to run __serverstop check functions" | __syslog && reset

### start server.example.com
	elif [ "$choice" = "Start" ]; then
		/usr/local/sbin/rhel-labs-functions.cfg  __serverstart 2> __syslog wait; exec /usr/local/sbin/rhel-labs || echo "failed to run __serverstart check functions" | __syslog && reset

### open a console for server.example.com
	elif [ "$choice" = "Console" ]; then
        /usr/local/sbin/rhel-labs-functions.cfg  __serverconsole 2> __syslog wait; sleep 1 && exec /usr/local/sbin/rhel-labs || echo "failed to run __serverconsole check functions" | __syslog && reset

### reset internal snapshot to default for server.example.com
    elif [ "$choice" = "Snapshot" ]; then
        /usr/local/sbin/rhel-labs-functions.cfg snap wait; sleep 1 && exec /usr/local/sbin/rhel-labs || echo "failed to run shapshot check functions" | __syslog && reset
    
    elif [ "$choice" = "Revert" ]; then
        /usr/local/sbin/rhel-labs-functions.cfg revert wait; sleep 1 && exec /usr/local/sbin/rhel-labs || echo "failed to run shapshot check functions" | __syslog && reset
### else conditional that failed to parse user selection or selection is somehow invalid
	else
		echo "Failed to call /usr/local/sbin/rhel-labs " | __syslog && exit || exit
    fi
