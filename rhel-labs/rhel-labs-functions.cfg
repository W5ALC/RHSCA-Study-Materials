#!/bin/bash

### download function
__labdownload() {
exec -a rhel-labs-functions 2> >(logger -s -t $(basename "$0")) &
	
	HOME=${DPATH} && cd "$HOME" || echo "Failed to create "$HOME", check clone function" | __syslog
	size=$(eval "$size")
	xx=$(xx 2>/dev/null) || xx=${var["xx"]}wget-$$
	trap "rm -f $xx" 0 1 2 5 15
	percentage="0"
    
    if [[ -e $DPATH/.md5pass ]] && [[ -e $DPATH/.install-finished ]]; then
		percentage="100"
	elif [[ $size -eq 543045073 ]]; then
		percentage="100"
	else
		wget -c -b "$download_arch" -o "$xx" || echo "Failed to start wget" | __syslog
	fi

		(while (true)
			do
			exec -a rhel-labs-functions 2> >(logger -s -t $(basename "$0")) &
			proc=$(ps auxx | grep -v grep | grep -e "wget")

			if [[ "$proc" == "" ]] && [[ $percentage -eq 100 ]]; then
				echo 100
				sleep 2
				return 0
			fi

			percentage="0"
			sleep 1
			percentage=$(tail -n2 "$xx" | eval "$grep1" || tail -n2 "$xx" | eval "$grep2" || tail -n2 "$xx" | eval "$grep3" || tail -n5 "$xx" | eval "$grep4" || echo "$xx" | __syslog)
			static="$percentage"
			sleep 1
			echo "$static"
			done
			)|

			$DIALOG --nocancel --no-kill  --backtitle "| RHEL-LABS |" --gauge "     updating and installing..." 7 55 || eval "$download_kill" || echo "Failed to kill download function" | __syslog
}

__labmd5() {
exec -a rhel-labs-functions 2> >(logger -s -t $(basename "$0")) &

    HOME=${DPATH} && cd "$HOME" || echo "Failed to create "$HOME", check clone function" | __syslog
	size=$(eval "$size")
	xx=$(xx 2>/dev/null) || xx=${var["xx"]}wget-$$
	trap "rm -f $xx" 0 1 2 5 15
	percentage="0"

	if [[ -e $DPATH/.md5pass ]] && [[ -e $DPATH/.install-finished ]]; then
		percentage="100"
	elif [[ -e $DPATH/RHEL7.2-HOMELAB.tar.gz_md5sum ]]; then
		percentage="100"
        touch "$DPATH"/.md5pass

	else
		wget -c -b "$download_md5sum" -o "$xx" || echo "Failed to start wget" | __syslog
	fi
		(while (true)
			do
        		exec -a rhel-labs-functions 2> >(logger -s -t $(basename "$0")) &
			    proc=$(ps auxx | grep -v grep | grep -e "wget")
        		if [[ "$proc" == "" ]] && [[ $percentage -eq 100 ]]; then
				echo 100
				sleep 2
				return 0
			fi
			percentage="0"
			sleep 1
            percentage=$(tail -n2 "$xx" | eval "$grep1" || tail -n2 "$xx" | eval "$grep2" || tail -n2 "$xx" | eval "$grep3" || tail -n5 "$xx" | eval "$grep4" || echo "$xx" | __syslog)
			static="$percentage"
			sleep 1
			echo "$static"
			done

			)|

			$DIALOG  --nocancel --no-kill  --backtitle "| RHEL-LABS |" --gauge "     verifying checksums..." 7 55 || eval "$download_kill" || echo "Failed to kill download function" | __syslog
	eval "$md5check" | __syslog
	md5CHECK=$(eval "$md5CHECK")

	if [[ $md5CHECK -lt 1 ]] && [[ ! -f $DPATH/.md5pass ]];then
		touch "$DPATH"/.md5pass
		echo "created .md5pass" | __syslog
		return $?
	elif [[ $md5CHECK -lt 1 ]] && [[ -f $DPATH/.md5pass ]];then
		echo ".md5pass found" | __syslog
		return $?
	else
		echo "md5sum check function failed to return 0 properly" | __syslog && return 0
	fi
}

__tarf() {
exec -a rhel-labs-functions 2> >(logger -s -t $(basename "$0")) &

    HOME=${DPATH} && cd "$HOME" || echo "Failed to create "$HOME", check clone function" | __syslog
	xx=$(xx 2>/dev/null) || xx=${var["xx"]}tar-$$
	trap "rm -f $xx" 0 1 2 5 15
 	eval "$md5check"
	export md5CHECK=$(eval "$md5CHECK")

		if [[ $md5CHECK -lt 1 ]] && [[ ! -e $DPATH/.install-finished ]] && [[ -f $DPATH/.md5pass ]] && [[ ! -e $DPATH/.tar-finished ]]; then
			eval $pv_tar | $DIALOG  --nocancel --no-kill  --backtitle "| RHEL-LABS |" --gauge "     extracting files ..." 7 55 && touch "$DPATH"/.tar-finished && touch "$DPATH"/.install-finished && echo ".install-finished created" || eval "$tar_kill" || echo "failed to run tar function" | __syslog
			return $?	
		elif [[ -e $DPATH/.tar-finished ]]; then
			percentage="100" 
			touch "$DPATH"/.tar-finished && touch "$DPATH"/.install-finished && echo ".install-finished created" || eval $tar_kill || echo "failed to run tar function" | __syslog
			return $?

		else
			eval "$pv_tar" | $DIALOG --nocancel --no-kill  --backtitle "| RHEL-LABS |" --gauge "     extracting files ..." 7 55 && touch "$DPATH"/.tar-finished && touch "$DPATH"/.install-finished && echo ".install-finished created" | __syslog || eval "$tar_kill" || echo "failed to run tar function" | __syslog

		fi
}


__servermd5() {
exec -a rhel-labs-functions 2> >(logger -s -t $(basename "$0")) &

        HOME=${qemu_dir} && cd "$HOME" || echo "Failed to create "$HOME", check clone function" | __syslog
        size=$(eval "$size")
        xx=$(xx 2>/dev/null) || xx=${var["xx"]}wgetmd5-$$
        trap "rm -f $xx" 0 1 2 5 15
        percentage="0"

		if [[ -e $HOME/.md5pass-server ]]; then
            percentage="100"
			echo ".md5pass-server created" | __syslog
		elif [[ -e $HOME/.server.example.com_md5sum ]]; then
			percentage="100"
                        echo ".md5pass-server created" | __syslog
		elif [[ ! -e $HOME/.server.example.com_md5sum ]] && [[ ! -e $HOME/.md5pass-server ]]; then
			wget -c -b "$download_servermd5" -o "$xx" || echo "Failed to start wget" | __syslog
		fi

        		(while (true)
        			do
				        exec -a rhel-labs-functions 2> >(logger -s -t $(basename "$0")) &
				        proc=$(ps auxx | grep -v grep | grep -e "wget")
        				if [[ "$proc" == "" ]] && [[ $percentage -eq 100 ]]; then
                				echo 100
                				sleep 2
                				return 0
        				fi
        			percentage="0"
        			sleep 1
                        	percentage=$(tail -n2 "$xx" | eval "$grep1" || tail -n2 "$xx" | eval "$grep2" || tail -n2 "$xx" | eval "$grep3" || tail -n5 "$xx" | eval "$grep4" || echo "$xx" | __syslog)
        			static="$percentage"
        			sleep 1
        			echo "$static"
        			done
        			)|
				"$DIALOG" --nocancel --no-kill  --backtitle "| RHEL-LABS |" \
                          --gauge "     verifying server checksums..." 7 55 || eval "$md5server_kill" || echo "Failed to md5 check for server.example.com, check functions" | __syslog

        eval "$md5check2" | __syslog
        md5CHECK2=$(eval "$md5CHECK2")

        if [[ $md5CHECK2 -lt 1 ]] && [[ ! -f $DPATH/.md5pass-server ]];then
                touch "$DPATH"/.md5pass-server
                echo "created .md5pass-server" | __syslog
                return $?
        elif [[ $md5CHECK2 -lt 1 ]] && [[ -f $DPATH/.md5pass-server ]];then
                echo ".md5pass-server found" | __syslog
                return $?
        else
                echo "server.example.com md5sum check function failed to return 0 properly" | __syslog && return $?
        fi
        }

__server_install() {
HOME=${DPATH} && cd "$HOME" || echo "Failed to create "$HOME", check clone function" | __syslog
xx=$(xx 2>/dev/null) || xx=${var["xx"]}virt-install-3$$
trap "rm -f $xx" 0 1 2 5 15
cp -arf "$qemu_dir"/"$virt1_image" "$qemu_dir"/"$virt2_image"
mac=$(eval "$mac")
sudo virt-install \
 --connect qemu:///system \
 --virt-type kvm \
 --name $virt1 \
 --cpu host \
 --vcpu 2 \
 --ram 1024 \
 --os-type=linux \
 --os-variant=rhel7 \
 --disk path="$qemu_dir"/"$virt2_image",bus=virtio \
 --network network=rhel-labs,mac="$mac" \
 --graphics spice \
 --force \
 --import &> >(__syslog)
wait
install_check=$(eval "$install_check")
    if [[ $install_check -eq 1 ]]; then
        touch $HOME/.server-installed && echo ".server-installed created" | __syslog
    fi
}

__servervirtinstall() {
exec -a rhel-labs-functions 2> >(logger -s -t $(basename "$0")) &
HOME=${DPATH} && cd "$HOME" || echo "Failed to create "$HOME", check clone function" | __syslog
xx=$(xx 2>/dev/null) || xx=${var["xx"]}virt-install1-$$
trap "rm -f $xx" 0 1 2 5 15

	virtcheck_server=$(eval "$virtcheck_server")
	virshcheck_server=$(eval "$virshcheck_server")

	cd "$HOME" || echo "Failed to create "$HOME", check clone function" | __syslog

	if [[ $virshcheck_server -eq 1 ]]; then
		eval "$vmpwdown_server" ; eval "$vmdelete_server" || echo "Failed to destroy server.example.com" | __syslog
		echo "virsh preped for vm creation" | __syslog
		eval "$libvirtd_start" || echo "Failed to start libvirtd" | __syslog
		eval "$libvirtd_enable" || echo "Failed to enable libvirtd" | __syslog
	fi

		(while (true)
			do
			    exec -a rhel-labs-functions 2> >(logger -s -t $(basename "$0")) &
			    proc="ps auxx|grep -v grep|grep virt-viewer|grep -o server.example.com|wc -l"

				if [[ $percentage -eq 100 ]] && [[ $virshcheck_server -eq 1 ]]; then
					sleep 2
					echo 98
					sleep 1
					echo 99
					sleep 1
					echo 100
					sleep 1
					return 0
				elif [[ $virtcheck_server -eq 0 ]] && [[ $virshcheck_server -eq 1 ]]; then
					percentage="100"	
					return 0
				fi
				sleep 1
				echo "$percentage"
				percentage=$(expr $percentage + 1)
				done
				)|
     				$DIALOG --nocancel --no-kill   --backtitle "| RHEL-LABS |" \
	     				    --gauge "   installing server.example.com " 7 55 || eval "$virt_install_kill" || echo "virt-install while loop failed" 

}


__serverreboot() {
exec -a rhel-labs-functions 2> >(logger -s -t $(basename "$0")) &
HOME=${DPATH} && cd "$HOME" || echo "Failed to create "$HOME", check clone function" | __syslog
xx=$(xx 2>/dev/null) || xx=${var["xx"]}reboot-$$
trap "rm -f $xx" 0 1 2 5 15

	percentage="0"

	(while (true)
		do
			proc="ps auxx|grep -v grep|grep virt-viewer|grep -o server.example.com|wc -l"
			reboot=$(eval "$reboot")
        		virtcheck_server=$(eval "$virtcheck_server")
        		virshcheck_server=$(eval "$virshcheck_server")

				if [[ $virtcheck_server -eq 0 ]]; then
                    percentage="100"
                    echo "$percentage"
                    sleep 1
					return $?


				elif [[ $virtcheck_server -eq 1 ]] && [[ $virshcheck_server -eq 1 ]]; then
					percentage="100"
					$reboot && wait
					echo "$percentage"
                    sleep 1
					return $?
					fi
					echo "$percentage"
					percentage=$(expr $percentage + 1)
					done
					)|
     					$DIALOG --nocancel  --no-kill  --backtitle "| RHEL-LABS |" \
             					--gauge "    rebooting server.example.com" 7 55 || eval "$reboot_kill" || echo "virsh reboot  while loop failed"
}

__serverstop() {
exec -a rhel-labs-functions 2> >(logger -s -t $(basename "$0")) &
HOME=${DPATH} && cd "$HOME" || echo "Failed to create "$HOME", check clone function" | __syslog
xx=$(xx 2>/dev/null) || xx=${var["xx"]}stop-$$
trap "rm -f $xx" 0 1 2 5 15


	(while (true)
		do	
            proc="ps auxx|grep -v grep|grep virt-viewer|grep -o server.example.com|wc -l"
			virtcheck_server=$(eval "$virtcheck_server")
            virshcheck_server=$(eval "$virshcheck_server")
			virtstop=$(eval "$virtstop")
            kill_console=$(eval "$kill_console")
            percentage="0"

				if [[ $virtcheck_server -eq 0 ]]; then
					percentage="100"
					sleep 1
                    echo "$percentage"
                    return $?

				elif [[ $virtcheck_server -eq 1 ]]; then
					percentage="100"
                    $virtstop && wait
					sleep 1
                    echo "$percentage"
                    return $?
				fi
				done
				)|
     				$DIALOG  --nocancel --no-kill  --backtitle "| RHEL-LABS |" \
             			     --gauge "   stopping server.example.com" 7 55 || eval "$virt_install_kill" || echo "virsh reboot  while loop failed"
}

__serverstart() {
exec -a rhel-labs-functions 2> >(logger -s -t $(basename "$0")) &
HOME=${DPATH} && cd "$HOME" || echo "Failed to create "$HOME", check clone function" | __syslog
xx=$(xx 2>/dev/null) || xx=${var["xx"]}start-$$
trap "rm -f $xx" 0 1 2 5 15

	virtcheck_server=$(eval "$virtcheck_server")
	virshcheck_server=$(eval "$virshcheck_server")
	netcheck=$(eval "$netcheck")
    percentage="0"

		if [[ $netcheck -lt 1 ]] && [[ $virshcheck_server -gt 0 ]] && [[ $virtcheck_server -eq 0 ]]; then
            echo "virsh network domain rhel-labs not found, creating..." | __syslog
            "$netdefine" | __syslog
            return $?

		elif [[ $netcheck -lt 1 ]] && [[ $virshcheck_server -eq 0 ]] && [[ $virtcheck_server -eq 0 ]]; then
			echo "virsh network domain rhel-labs and libvirtd not running, fixing both issues" | __syslog
			eval "$libvirtd_start" && __servernetwork | __syslog
            return $?
        fi       

		(while (true)
			do
                    proc=$(sudo virsh list --all|grep running|awk '{print $3}'|wc -l)
   			        virtcheck_server=$(eval "$virtcheck_server")
        			virshcheck_server=$(eval "$virshcheck_server")
        			virtstart=$(eval "$virtstart")

					if [[ $virtcheck_server -eq 1 ]]; then
						percentage="100"
                        sleep 1
                        echo "$percentage"
						return 0

					elif [[ $proc -eq 0 ]] && [[ $virshcheck_server -eq 1 ]]; then
						percentage="100"
                        "$virtstart" && wait
                        sleep 1
                        echo "$percentage"
						return 0
                    elif [[ $proc -eq 1 ]]; then
                        percentage="100"
                        sleep 1
                        echo "$percentage"
                        return 0
					fi
					done
					)|
      					$DIALOG --nocancel  --no-kill  --backtitle "| RHEL-LABS |" \
             					--gauge "    starting server.example.com..." 7 55 || eval "$virt_install_kill" || echo "virt-viewer while loop failed"
}


__serverconsole() {
exec -a rhel-labs-functions 2> >(logger -s -t $(basename "$0")) &
HOME=${DPATH} && cd "$HOME" || echo "Failed to create "$HOME", check clone function" | __syslog
xx=$(xx 2>/dev/null) || xx=${var["xx"]}console-$$
trap "rm -f $xx" 0 1 2 5 15
percentage="0"

		(while (true)
			do
				proc=$(ps auxx|grep -v grep|grep virt-viewer|grep -o server.example.com|wc -l)
                virtcheck_server=$(eval "$virtcheck_server")
                virshcheck_server=$(eval "$virshcheck_server")
                virtconsole=$(eval "$virtconsole")				

					if [[ $proc -eq 1 ]]; then
						percentage="100"
                        echo "$percentage"
                        sleep 1
						return $?


					elif [[ $proc -eq 0 ]]; then
						percentage="100"
						"$virtconsole" && wait
						echo "$percentage"
                        sleep 1
						return $?
					fi
				percentage=$(expr $percentage + 1)
				done 
				)|
     				$DIALOG  --nocancel --no-kill  --backtitle "| RHEL-LABS |" \
             				--gauge "  opening console to server" 7 55 || eval "$kill_console" || echo "virsh reboot  while loop failed"

}

__servernetwork() {
exec -a rhel-labs-functions 2> >(logger -s -t $(basename "$0")) &
HOME=${DPATH} && cd "$HOME" || echo "Failed to create "$HOME", check clone function" | __syslog
xx=$(xx 2>/dev/null) || xx=${var["xx"]}network-$$
trap "rm -f $xx" 0 1 2 5 15

	virtcheck_server=$(eval "$virtcheck_server")
	virshcheck_server=$(eval "$virshcheck_server")
	netcheck=$(eval "$netcheck")
	vmdelete_server=$(eval "$vmdelete_server")
	vmpwdown_server=$(eval "$vmpwdown_server")
	netdelete=$(eval "$netdelete")
    percentage="100"

	# this will blow away the current virsh network domain no matter what for setup reasons
	echo "Setting up "rhel-labs" network domain" | __syslog

		if [[ $netcheck -gt 0 ]]; then
			"$netdelete" || echo "failed to destroy rhel-labs network" | __syslog
		fi
            
			(while (true)
				do
					exec -a rhel-labs-functions 2> >(logger -s -t $(basename "$0")) &
					proc=$(sudo systemctl status libvirtd|grep -o "active (running)"| wc -l)
					proc2=$(sudo virsh net-list|grep rhel-labs|grep -o "active"|wc -l)

						if [[ $proc -eq 0 ]]; then
							eval "$libvirtd_start" || echo "Failed to start libvirtd" | __syslog
							eval "$libvirtd_enable" || echo "Failed to enable libvirtd" | __syslog
						elif [[ $proc -eq 1 ]] && [[ $proc2 -eq 1 ]]; then
							sleep 2
							echo 98
							sleep 1
							echo 99
							sleep 1
							echo 100
							sleep 1
							return 0
						elif [[ $proc -eq 1 ]] && [[ $proc2 -eq 0 ]] && [[ $percentage -gt 0 ]]; then
echo "generating /home/rhel-labs/rhel-labs/.storage/rhel-labs.xml" | __syslog
cat > /home/rhel-labs/rhel-labs/.storage/rhel-labs.xml << EOF
<network>
  <name>rhel-labs</name>
  <forward mode='nat'/>
  <bridge name="rhel-labs"/>
  <forward/>
  <ip address="192.168.142.1" netmask="255.255.255.0">
    <dhcp>
      <range start="192.168.142.2" end="192.168.142.254"/>
    </dhcp>
  </ip>
</network>
EOF
echo "creating "rhel-labs" network with nat forwarding" | __syslog
eval "$netdefine" || eval "$autostart" || echo "failed to create rhel-labs network domain" | __syslog
						fi

						sleep 1
						echo "$percentage"
						done
						)|
						$DIALOG  --nocancel --no-kill  --backtitle "| RHEL-LABS |" \
							     --gauge "   creating rhel-labs network" 7 55 || eval "$virt_install_kill" || echo "Failed to create rhel-labs network" | __syslog
}

### logger function
__syslog() {
        logger -t $(basename $0) -p user.err "$@";
}

### cleanup function for open yet (deleted) filename inode pointers I've noticed, possibly self-inflicted here for future use
__random() {
exec -a rhel-labs-functions 2> >(logger -s -t $(basename "$0")) &
mknod -m 666 /dev/random c 1 8 || echo "failed making /dev/urandom check kernel support" | __syslog
mknod -m 666 /dev/urandom c 1 9 || echo "failed making /dev/urandom check kernel support" | __syslog
chown root:root /dev/random /dev/urandom || echo "failed chowning /dev/urandom to root" | __syslog
}


__create_user() {
exec -a rhel-labs-functions 2> >(logger -s -t $(basename "$0")) &

if [[ $(id -nu) != root ]]; then
sudo -k
echo "

Installing RHEL-LABS requires sudo or root privilege. Please authenticate 
to begin the installation.

"
exit 1

elif [[ $(id -nu) == root ]]; then
rm -fr /home/rhel-labs/; rm -fr /etc/sudoers.d/rhel-labs; sleep 1; userdel rhel-labs; sleep 1 ; sleep 1 ;virsh destroy server.example.com; sleep 1 ;virsh undefine server.example.com; sleep 1 ; virsh net-destroy rhel-labs ; sleep 1; rsync -ruv .bash_profile .bashrc /home/rhel-labs/

useradd -G qemu rhel-labs && echo "rhel-labs:redhat" | chpasswd rhel-labs && echo "rhel-labs ALL=(ALL) NOPASSWD: /usr/bin/systemctl restart libvirtd, /usr/bin/systemctl status libvirtd, /usr/bin/systemctl stop libvirtd, /usr/bin/systemctl start libvirtd, /usr/bin/virsh, /usr/bin/virt-install, /usr/bin/virt-manager, /etc/sudoers.d/rhel-labs, /usr/bin/virt-viewer server.example.com, /usr/bin/chown" | tee -a /etc/sudoers.d/rhel-labs && chmod 0440 /etc/sudoers.d/rhel-labs && chmod +x /home/rhel-labs/ && echo "/usr/local/sbin/rhel-labs" | tee -a /home/rhel-labs/.bashrc && echo "DISPLAY='IP:0.0" | tee -a /home/rhel-labs/.bashrc && echo "xhost +localhost" | tee -a /home/rhel-labs/.bashrc && mkdir -p /usr/local/sbin/ ; rsync -ruv * /usr/local/sbin/ && chown rhel-labs:rhel-labs /usr/local/sbin/ && chmod 0755 /usr/local/sbin/ && chmod +x /usr/local/sbin/
exit 0

else 
echo "Either execute this install command as root or with proper sudo access" && exit 0
fi
}

__server_snap() {
HOME=${DPATH} && cd "$HOME" || echo "Failed to create "$HOME", check clone function" | __syslog
xx=$(xx 2>/dev/null) || xx=${var["xx"]}virt-snap-$$
trap "rm -f $xx" 0 1 2 5 15
(vmpwdown_server=$(eval "$vmpwdown_server")
"$vmpwdown_server" && wait || sleep 1 && percentage="100"
cp -arf "$qemu_dir"/"$virt2_image" "$qemu_dir"/"$virt3_image" && wait
sleep 1
percentage="100"
sleep 1
return 0)| $DIALOG  --nocancel --no-kill  --backtitle "| RHEL-LABS |" \
                    --gauge "   creating snapshot" 7 55 
return $?
}


__server_revert() {
HOME=${DPATH} && cd "$HOME" || echo "Failed to create "$HOME", check clone function" | __syslog
xx=$(xx 2>/dev/null) || xx=${var["xx"]}virt-revert-$$
trap "rm -f $xx" 0 1 2 5 15
(vmpwdown_server=$(eval "$vmpwdown_server")
"$vmpwdown_server" && wait || sleep 1 && percentage="100"
cp -arf "$qemu_dir"/"$virt3_image" "$qemu_dir"/"$virt2_image" && wait
sleep 1
percentage="100"
sleep 1
return 0)| $DIALOG  --nocancel --no-kill  --backtitle "| RHEL-LABS |" \
                    --gauge "   reverting snapshot" 7 55 
return $?
}



# MAIN
for args in "$@"; do
	if [ "$args" = "clone" ]; then
		__labdownload 2> __syslog || echo "__labdownload function has failed" && exit
    	elif [ "$args" = "labmd5" ]; then
        	__labmd5 2> __syslog  || echo "__labmd5 has failed" && exit
	elif [ "$args" = "tar" ]; then
		__tarf 2> __syslog || echo "__tarf has failed" && exit
	elif [ "$args" = "server_1" ]; then
		__servermd5 2> __syslog || echo "__servermd5 has failed" && exit
	elif [ "$args" = "server_2" ]; then
		__servernetwork 2> __syslog || echo "__servernetwork has failed" && exit
	elif [ "$args" = "server_3" ]; then
		__servervirtinstall 2> __syslog 
	elif [ "$args" = "server_4" ]; then
		__server_install&exit
	elif [ "$args" = "__serverreboot" ]; then
		__serverreboot 2>/dev/null && exit 0 || echo "failed to reboot server"
	elif [ "$args" = "__serverstop" ];then
		__serverstop 2> __syslog && exit 0 || echo "failed to stop server"
	elif [ "$args" = "__serverstart" ];then
		__serverstart 2> __syslog && exit 0 || echo "failed to start server"
	elif [ "$args" = "__serverconsole" ];then
        	__serverconsole&exit
	elif [ "$args" = "__syslog" ];then
        	__syslog
	elif [ "$args" = "__random" ];then
        	__random 2>/dev/null && exit 0
	elif [ "$args" = "snap" ];then
        	__server_snap 2> __syslog && exit 0
        elif [ "$args" = "revert" ];then
        	__server_revert 2> __syslog && exit 0
        elif [ "$args" = "install" ];then
        	__create_user 2> __syslog && exit 0
	else
        	echo "Main functions script has failed to return 0 properly" && exit
	fi
done
