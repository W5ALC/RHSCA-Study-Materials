---
- name: ensure tower/controller is online and working
  uri:
    url: https://localhost/api/v2/ping/
    method: GET
    user: admin
    password: "{{ admin_password }}"
    validate_certs: false
    force_basic_auth: true
  register: controller_online
  until: controller_online is success
  delay: 3
  retries: 5

- name: determine if controller or tower
  set_fact:
    controller_or_tower: "{{ 'controller' if 'Platform' in check_controller.x_api_product_name else 'tower' }}"

#### INVENTORY
- name: create workshop inventory
  awx.awx.tower_inventory:
    name: "Workshop Inventory"
    organization: "Default"
    tower_username: admin
    tower_password: "{{ admin_password }}"
    tower_host: "https://{{ ansible_host }}"
    tower_verify_ssl: false
  register: workshop_inventory
  until: workshop_inventory is success
  delay: 3
  retries: 5

- name: import inventory
  shell: 'tower-manage inventory_import --source=/home/{{ username }}/lab_inventory/hosts --inventory-name="Workshop Inventory"'
#### END OF INVENTORY

### USER
- name: add student user
  awx.awx.tower_user:
    username: "{{ username }}"
    password: "{{ admin_password }}"
    email: fake@fake.com
    state: present
    superuser: true
    tower_username: admin
    tower_password: "{{ admin_password }}"
    tower_host: "https://{{ ansible_host }}"
    tower_verify_ssl: false

#### CREDENTIAL
- name: add SSH credential into Ansible Tower
  awx.awx.tower_credential:
    name: "Workshop Credential"
    credential_type: Machine
    organization: "Default"
    tower_username: admin
    tower_password: "{{ admin_password }}"
    tower_host: "https://{{ ansible_host }}"
    tower_verify_ssl: false
    inputs:
      username: ec2-user
      ssh_key_data: "{{ lookup('file', playbook_dir +'/' + ec2_name_prefix + '/' + ec2_name_prefix + '-private.pem') }}"

# won't work for Ansible Tower right now....
- name: add tower credential into ansible tower
  when: controller_or_tower=="controller"
  awx.awx.credential:
    name: "Tower Credential"
    kind: "{{ controller_or_tower }}"
    organization: Default
    tower_username: admin
    tower_password: "{{ admin_password }}"
    tower_host: "https://{{ ansible_host }}"
    tower_verify_ssl: false
    inputs:
      host: "{{ username }}.{{ ec2_name_prefix }}.{{ workshop_dns_zone }}"
      username: admin
      password: "{{ admin_password }}"

#### END OF CREDENTIAL

#### REMOVE BUILT-IN DEMO CONTENT
- name: delete demo job template
  awx.awx.tower_job_template:
    name: "Demo Job Template"
    state: absent
    tower_username: admin
    tower_password: "{{ admin_password }}"
    tower_host: "https://{{ ansible_host }}"
    tower_verify_ssl: false

- name: remove demo credential
  awx.awx.tower_credential:
    username: admin
    name: "Demo Credential"
    kind: ssh
    state: absent
    organization: ""
    tower_username: admin
    tower_password: "{{ admin_password }}"
    tower_host: "https://{{ ansible_host }}"
    tower_verify_ssl: false

- name: remove demo inventory
  awx.awx.tower_inventory:
    name: "Demo Inventory"
    organization: "Default"
    state: absent
    tower_username: admin
    tower_password: "{{ admin_password }}"
    tower_host: "https://{{ ansible_host }}"
    tower_verify_ssl: false

- name: remove built-in tower project
  awx.awx.tower_project:
    name: "Demo Project"
    organization: "Default"
    scm_type: git
    scm_url: "https://github.com/ansible/ansible-tower-samples"
    state: absent
    tower_username: admin
    tower_password: "{{ admin_password }}"
    tower_host: "https://{{ ansible_host }}"
    tower_verify_ssl: false
#### END OF REMOVE BUILT-IN DEMO CONTENT

- name: setup workshop specific tower information
  include_tasks: "{{item}}"
  with_first_found:
    - "{{role_path}}/tasks/{{workshop_type}}.yml"
    - "{{role_path}}/tasks/unsupported_workshop.yml"
